/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import dominio.Libro;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author vale_
 */
public class VentanaVenta extends javax.swing.JFrame {

    private DefaultListModel<String> librosEnStockModel = new DefaultListModel<>();
    private DefaultListModel<String> librosFacturaModel = new DefaultListModel<>();
    private Map<String, Integer> librosEnFactura = new HashMap<>();

    /**
     * Creates new form VentanaVenta
     */
    public VentanaVenta() {
        initComponents();
        cargarLibrosEnStock();
        inicializarFactura();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblNumeroDeFactura = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblCliente = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstLibrosFactura = new javax.swing.JList<>();
        btnAgregarLibro = new javax.swing.JButton();
        btnQuitarLibro = new javax.swing.JButton();
        btnRegustrarFactura = new javax.swing.JButton();
        btnCancelarFactura = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstLibrosEnStock = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Venta de Libros");
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        lblNumeroDeFactura.setText("Factura:");
        jPanel1.add(lblNumeroDeFactura);
        lblNumeroDeFactura.setBounds(12, 0, 130, 15);

        jLabel1.setText("Fecha:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(12, 27, 130, 15);

        lblCliente.setText("Cliente:");
        jPanel1.add(lblCliente);
        lblCliente.setBounds(300, 30, 50, 15);

        lstLibrosFactura.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstLibrosFactura);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(310, 80, 200, 150);

        btnAgregarLibro.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAgregarLibro.setText("->");
        btnAgregarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarLibroActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregarLibro);
        btnAgregarLibro.setBounds(230, 110, 60, 40);

        btnQuitarLibro.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnQuitarLibro.setText("<-");
        btnQuitarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarLibroActionPerformed(evt);
            }
        });
        jPanel1.add(btnQuitarLibro);
        btnQuitarLibro.setBounds(230, 170, 60, 40);

        btnRegustrarFactura.setText("jButton3");
        jPanel1.add(btnRegustrarFactura);
        btnRegustrarFactura.setBounds(90, 290, 73, 25);

        btnCancelarFactura.setText("jButton4");
        jPanel1.add(btnCancelarFactura);
        btnCancelarFactura.setBounds(370, 290, 73, 25);

        lstLibrosEnStock.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(lstLibrosEnStock);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 80, 190, 150);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(30, 20, 720, 400);

        setBounds(0, 0, 788, 479);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarLibroActionPerformed
        // Obtener el libro seleccionado
        int selectedIndex = lstLibrosEnStock.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un libro de la lista en stock.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener información del libro seleccionado
        String libroSeleccionado = librosEnStockModel.get(selectedIndex); // e.g., "1234 - Harry Potter"
        String isbn = libroSeleccionado.split(" - ")[0]; // Obtener el ISBN
        Libro libro = Libro.obtenerLibros().stream()
                .filter(l -> l.getIsbn().equals(isbn))
                .findFirst()
                .orElse(null);

        if (libro == null) {
            JOptionPane.showMessageDialog(this, "No se encontró información del libro seleccionado.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Incrementar la cantidad en la factura
        librosEnFactura.put(isbn, librosEnFactura.getOrDefault(isbn, 0) + 1);

        // Actualizar el modelo de la lista de factura
        librosFacturaModel.clear();
        for (Map.Entry<String, Integer> entry : librosEnFactura.entrySet()) {
            String isbnFactura = entry.getKey();
            int cantidad = entry.getValue();

            // Buscar el libro correspondiente al ISBN actual
            Libro libroFactura = Libro.obtenerLibros().stream()
                    .filter(l -> l.getIsbn().equals(isbnFactura))
                    .findFirst()
                    .orElse(null);

            if (libroFactura != null) {
                String facturaItem = cantidad + " - " + libroFactura.getTitulo() + " - $" + libroFactura.getPrecioVenta();
                librosFacturaModel.addElement(facturaItem);
            }
        }

        // Asignar el modelo actualizado a la lista
        lstLibrosFactura.setModel(librosFacturaModel);
    }//GEN-LAST:event_btnAgregarLibroActionPerformed

    private void btnQuitarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarLibroActionPerformed
        // Obtener el libro seleccionado en la lista de la factura
        int selectedIndex = lstLibrosFactura.getSelectedIndex();
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione un libro de la lista de la factura.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener información del libro seleccionado
        String libroSeleccionado = librosFacturaModel.get(selectedIndex); // e.g., "1 - Harry Potter y la Piedra Filosofal - $25.0"
        String[] partes = libroSeleccionado.split(" - ");
        if (partes.length < 3) {
            JOptionPane.showMessageDialog(this, "Formato de libro seleccionado inválido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // El ISBN debe estar en el formato de clave (primer elemento del modelo de factura)
        String titulo = partes[1]; // El título está en la segunda posición
        Libro libro = Libro.obtenerLibros().stream()
                .filter(l -> l.getTitulo().equals(titulo)) // Buscar por título
                .findFirst()
                .orElse(null);

        if (libro == null) {
            JOptionPane.showMessageDialog(this, "No se encontró información del libro seleccionado.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener el ISBN del libro encontrado
        String isbn = libro.getIsbn();

        // Verificar si el ISBN está en la factura
        if (!librosEnFactura.containsKey(isbn)) {
            JOptionPane.showMessageDialog(this, "El libro seleccionado no se encuentra en la factura.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Disminuir la cantidad del libro o eliminarlo
        int cantidadActual = librosEnFactura.get(isbn);
        if (cantidadActual > 1) {
            librosEnFactura.put(isbn, cantidadActual - 1); // Disminuir la cantidad
        } else {
            librosEnFactura.remove(isbn); // Eliminar el libro si la cantidad es 1
        }

        // Actualizar el modelo de la lista de factura
        librosFacturaModel.clear();
        for (Map.Entry<String, Integer> entry : librosEnFactura.entrySet()) {
            String isbnFactura = entry.getKey();
            int cantidad = entry.getValue();

            // Buscar el libro correspondiente al ISBN actual
            Libro libroFactura = Libro.obtenerLibros().stream()
                    .filter(l -> l.getIsbn().equals(isbnFactura))
                    .findFirst()
                    .orElse(null);

            if (libroFactura != null) {
                String facturaItem = cantidad + " - " + libroFactura.getTitulo() + " - $" + libroFactura.getPrecioVenta();
                librosFacturaModel.addElement(facturaItem);
            }
        }

        // Asignar el modelo actualizado a la lista
        lstLibrosFactura.setModel(librosFacturaModel);
    }//GEN-LAST:event_btnQuitarLibroActionPerformed
    private void cargarLibrosEnStock() {
        librosEnStockModel.clear(); // Limpiar el modelo actual

        // Simulación de obtener los libros disponibles
        List<Libro> librosEnStock = Libro.obtenerLibros(); // Método que devuelve los libros

        // Ordenar por título
        librosEnStock.sort(Comparator.comparing(Libro::getTitulo));

        // Cargar los libros en el modelo
        for (Libro libro : librosEnStock) {
            librosEnStockModel.addElement(libro.getIsbn() + " - " + libro.getTitulo());
        }

        // Asignar el modelo a la lista
        lstLibrosEnStock.setModel(librosEnStockModel);
    }

    private void inicializarFactura() {
        librosFacturaModel.clear(); // Limpiar cualquier dato previo en el modelo
        lstLibrosFactura.setModel(librosFacturaModel); // Asegurar que el modelo esté vinculado
        librosEnFactura.clear(); // Limpiar la estructura que lleva el control de la factura
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaVenta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarLibro;
    private javax.swing.JButton btnCancelarFactura;
    private javax.swing.JButton btnQuitarLibro;
    private javax.swing.JButton btnRegustrarFactura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblNumeroDeFactura;
    private javax.swing.JList<String> lstLibrosEnStock;
    private javax.swing.JList<String> lstLibrosFactura;
    // End of variables declaration//GEN-END:variables
}
