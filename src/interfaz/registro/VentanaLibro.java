/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz.registro;

import dominio.Autor;
import dominio.Editorial;
import dominio.Genero;
import dominio.Libro;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author vale_
 */
public class VentanaLibro extends javax.swing.JFrame {

    /**
     * Creates new form VentanaLibro
     */
    private Map<String, Editorial> mapaEditoriales = new HashMap<>();
    private Map<String, Genero> mapaGeneros = new HashMap<>();
    private Map<String, Autor> mapaAutores = new HashMap<>();
    private File imagenSeleccionada = null; // Variable para guardar la imagen seleccionada

    public VentanaLibro() {
        initComponents();
        Libro.cargarLibros(); // Cargar libros desde el archivo
        cargarEditoriales();
        cargarGeneros();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblEditorial = new javax.swing.JLabel();
        lblAutor = new javax.swing.JLabel();
        lblGenero = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        lblVistaPrevia = new javax.swing.JLabel();
        lblPrecioVenta = new javax.swing.JLabel();
        cboAutor = new javax.swing.JComboBox<>();
        cboGenero = new javax.swing.JComboBox<>();
        cboEditorial = new javax.swing.JComboBox<>();
        txtTitulo = new javax.swing.JTextField();
        txtPrecioCosto = new javax.swing.JTextField();
        txtPrecioVenta = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        lblPrecioVenta1 = new javax.swing.JLabel();
        lblPrecioCosto1 = new javax.swing.JLabel();
        btnAgregarLibro = new javax.swing.JButton();
        lblISBN1 = new javax.swing.JLabel();
        txtISBN = new javax.swing.JTextField();
        btnAgregarImagen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registrar Libro");
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        lblEditorial.setText("Editorial");
        jPanel1.add(lblEditorial);
        lblEditorial.setBounds(0, 40, 90, 20);

        lblAutor.setText("Autor");
        jPanel1.add(lblAutor);
        lblAutor.setBounds(0, 150, 34, 15);

        lblGenero.setText("Género");
        jPanel1.add(lblGenero);
        lblGenero.setBounds(0, 90, 60, 20);

        lblTitulo.setText("Titulo");
        jPanel1.add(lblTitulo);
        lblTitulo.setBounds(0, 200, 34, 20);

        lblVistaPrevia.setText("Sin foto");
        lblVistaPrevia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lblVistaPrevia);
        lblVistaPrevia.setBounds(380, 20, 70, 60);

        lblPrecioVenta.setText("Precio Venta");
        jPanel1.add(lblPrecioVenta);
        lblPrecioVenta.setBounds(230, 150, 90, 15);

        cboAutor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" })
        );
        jPanel1.add(cboAutor);
        cboAutor.setBounds(80, 140, 101, 24);

        cboGenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboGenero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGeneroActionPerformed(evt);
            }
        });
        jPanel1.add(cboGenero);
        cboGenero.setBounds(80, 90, 101, 24);

        cboEditorial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboEditorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboEditorialActionPerformed(evt);
            }
        });
        jPanel1.add(cboEditorial);
        cboEditorial.setBounds(80, 40, 100, 24);

        txtTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTituloActionPerformed(evt);
            }
        });
        jPanel1.add(txtTitulo);
        txtTitulo.setBounds(80, 200, 100, 20);

        txtPrecioCosto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioCostoActionPerformed(evt);
            }
        });
        jPanel1.add(txtPrecioCosto);
        txtPrecioCosto.setBounds(360, 100, 100, 19);
        jPanel1.add(txtPrecioVenta);
        txtPrecioVenta.setBounds(360, 150, 100, 19);
        jPanel1.add(txtStock);
        txtStock.setBounds(360, 200, 100, 19);

        lblPrecioVenta1.setText("Cant. Stock");
        jPanel1.add(lblPrecioVenta1);
        lblPrecioVenta1.setBounds(230, 200, 90, 15);

        lblPrecioCosto1.setText("Precio Costo");
        jPanel1.add(lblPrecioCosto1);
        lblPrecioCosto1.setBounds(230, 100, 90, 15);

        btnAgregarLibro.setText("Agregar Libro");
        btnAgregarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarLibroActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregarLibro);
        btnAgregarLibro.setBounds(310, 290, 150, 25);

        lblISBN1.setText("ISBN");
        jPanel1.add(lblISBN1);
        lblISBN1.setBounds(0, 250, 34, 20);

        txtISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtISBNActionPerformed(evt);
            }
        });
        jPanel1.add(txtISBN);
        txtISBN.setBounds(80, 250, 100, 20);

        btnAgregarImagen.setText("Seleccionar Imagen");
        btnAgregarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarImagenActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregarImagen);
        btnAgregarImagen.setBounds(230, 40, 130, 25);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(30, 20, 460, 320);

        setBounds(0, 0, 533, 402);
    }// </editor-fold>//GEN-END:initComponents

    private void cboEditorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboEditorialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboEditorialActionPerformed

    private void cboGeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGeneroActionPerformed
        String generoSeleccionado = (String) cboGenero.getSelectedItem();
        if (generoSeleccionado != null) {
            cargarAutoresPorGenero(generoSeleccionado);
        }
    }//GEN-LAST:event_cboGeneroActionPerformed

    private void txtPrecioCostoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioCostoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioCostoActionPerformed

    private void txtTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTituloActionPerformed

    private void btnAgregarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarLibroActionPerformed
        String isbn = txtISBN.getText().trim();
        String titulo = txtTitulo.getText().trim();
        String precioCostoStr = txtPrecioCosto.getText().trim();
        String precioVentaStr = txtPrecioVenta.getText().trim();
        String stockStr = txtStock.getText().trim();

        String nombreEditorial = (String) cboEditorial.getSelectedItem();
        Editorial editorial = mapaEditoriales.get(nombreEditorial);

        String nombreGenero = (String) cboGenero.getSelectedItem();
        Genero genero = mapaGeneros.get(nombreGenero);

        String nombreAutor = (String) cboAutor.getSelectedItem();
        Autor autor = mapaAutores.get(nombreAutor);
        List<String> camposVacios = new ArrayList<>();

        if (isbn.isEmpty()) {
            camposVacios.add("ISBN");
        }
        if (titulo.isEmpty()) {
            camposVacios.add("Título");
        }
        if (precioCostoStr.isEmpty()) {
            camposVacios.add("Precio de Costo");
        }
        if (precioVentaStr.isEmpty()) {
            camposVacios.add("Precio de Venta");
        }
        if (stockStr.isEmpty()) {
            camposVacios.add("Stock");
        } else {
            int stock = Integer.parseInt(stockStr);
            if (stock < 0) {
                JOptionPane.showMessageDialog(this, "El stock debe ser un número mayor o igual a 0.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        }
        if (editorial == null) {
            camposVacios.add("Editorial");
        }
        if (genero == null) {
            camposVacios.add("Género");
        }
        if (autor == null) {
            camposVacios.add("Autor");
        }

        if (!camposVacios.isEmpty()) {
            String mensaje = "Debe completar los siguientes campos: " + String.join(", ", camposVacios);
            JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        double precioCosto;
        double precioVenta;
        int stock;

        try {
            precioCosto = Double.parseDouble(precioCostoStr);
            precioVenta = Double.parseDouble(precioVentaStr);
            stock = Integer.parseInt(stockStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos en Precio de Costo, Precio de Venta y Stock.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (imagenSeleccionada != null) {
            File carpetaImagenes = new File("imagenes"); // Carpeta en el directorio raíz del proyecto
            if (!carpetaImagenes.exists()) {
                carpetaImagenes.mkdir();
            }

            // Guarda la imagen con el ISBN como nombre
            String extension = imagenSeleccionada.getName().substring(imagenSeleccionada.getName().lastIndexOf("."));
            File destino = new File(carpetaImagenes, isbn + extension);

            try {
                Files.copy(imagenSeleccionada.toPath(), destino.toPath(), StandardCopyOption.REPLACE_EXISTING);
                System.out.println("Imagen guardada en: " + destino.getAbsolutePath());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar la imagen.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        // Código existente para validar y crear el libro...

        Libro nuevoLibro = new Libro(editorial, genero, autor, isbn, titulo, precioCosto, precioVenta, stock);

        if (Libro.agregarLibro(nuevoLibro)) {
            JOptionPane.showMessageDialog(this, "Libro agregado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            Libro.guardarLibros(); // Guardar libros en el archivo
        } else {
            JOptionPane.showMessageDialog(this, "El ISBN ya existe. Debe ser único.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarLibroActionPerformed

    private void txtISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtISBNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtISBNActionPerformed

    private void btnAgregarLibro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarLibro1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarLibro1ActionPerformed

    private void btnAgregarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarImagenActionPerformed
        JFileChooser selector = new JFileChooser();
        selector.setFileFilter(new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png", "gif"));

        int opcion = selector.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            imagenSeleccionada = selector.getSelectedFile();
            mostrarImagen(imagenSeleccionada);
        }
    }//GEN-LAST:event_btnAgregarImagenActionPerformed

    private void cargarEditoriales() {
        cboEditorial.removeAllItems();
        mapaEditoriales.clear();

        for (Editorial editorial : Editorial.obtenerTodasLasEditoriales()) {
            String nombre = editorial.getNombre();
            cboEditorial.addItem(nombre);
            mapaEditoriales.put(nombre, editorial);
        }
    }

    private void cargarGeneros() {
        cboGenero.removeAllItems();
        mapaGeneros.clear();

        for (Genero genero : Genero.obtenerTodosLosGeneros()) {
            String nombre = genero.getNombre();
            cboGenero.addItem(nombre);
            mapaGeneros.put(nombre, genero);
        }
    }

    private void cargarAutoresPorGenero(String generoSeleccionado) {
        cboAutor.removeAllItems();
        mapaAutores.clear();

        for (Autor autor : Autor.obtenerTodosLosAutores()) {
            if (autor.escribeEnGenero(generoSeleccionado)) {
                String nombre = autor.getNombre();
                cboAutor.addItem(nombre);
                mapaAutores.put(nombre, autor);
            }
        }
    }

    private void mostrarImagen(File imagen) {
        try {
            BufferedImage img = ImageIO.read(imagen);
            ImageIcon icono = new ImageIcon(img.getScaledInstance(lblVistaPrevia.getWidth(), lblVistaPrevia.getHeight(), Image.SCALE_SMOOTH));
            lblVistaPrevia.setIcon(icono);
            lblVistaPrevia.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar la imagen.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaLibro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarImagen;
    private javax.swing.JButton btnAgregarLibro;
    private javax.swing.JComboBox<String> cboAutor;
    private javax.swing.JComboBox<String> cboEditorial;
    private javax.swing.JComboBox<String> cboGenero;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAutor;
    private javax.swing.JLabel lblEditorial;
    private javax.swing.JLabel lblGenero;
    private javax.swing.JLabel lblISBN1;
    private javax.swing.JLabel lblPrecioCosto1;
    private javax.swing.JLabel lblPrecioVenta;
    private javax.swing.JLabel lblPrecioVenta1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblVistaPrevia;
    private javax.swing.JTextField txtISBN;
    private javax.swing.JTextField txtPrecioCosto;
    private javax.swing.JTextField txtPrecioVenta;
    private javax.swing.JTextField txtStock;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
}
